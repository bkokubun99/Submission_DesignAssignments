
DA_2C_TASK_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a02  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f2  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <set>:
	{
		cycle --;
		while ((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;			//RESET OVERFLOW FLAG
	}
	DDRB = (0<<3);				//SET PORTB.3 "OFF"
  dc:	14 bc       	out	0x24, r1	; 36
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	85 bd       	out	0x25, r24	; 37
  e2:	16 bc       	out	0x26, r1	; 38
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{
	//DDRC &=~ (1<<3);			//SET PORTC.3 INPUT
	//PORTC |= (1<<3);			//PULL-UP RESISTOR ACTIVATE
	set();						//CALL set FCT
  e6:	0e 94 6e 00 	call	0xdc	; 0xdc <set>
	DDRB = (1<<3);				//SET PORTB.3 "ON"
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		if ((Overflow >= 15) & (Overflow < 38))
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	45 2f       	mov	r20, r21
		{
			DDRB = (0<<3);
		}
		if ((Overflow > 38))
		{
			DDRB = (1<<3);
  f4:	68 e0       	ldi	r22, 0x08	; 8
	//PORTC |= (1<<3);			//PULL-UP RESISTOR ACTIVATE
	set();						//CALL set FCT
	DDRB = (1<<3);				//SET PORTB.3 "ON"
	while (1)
	{
		if ((Overflow >= 15) & (Overflow < 38))
  f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  fa:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
  fe:	82 2f       	mov	r24, r18
 100:	9f 30       	cpi	r25, 0x0F	; 15
 102:	08 f4       	brcc	.+2      	; 0x106 <main+0x20>
 104:	84 2f       	mov	r24, r20
 106:	88 23       	and	r24, r24
 108:	31 f0       	breq	.+12     	; 0x116 <main+0x30>
 10a:	82 2f       	mov	r24, r18
 10c:	36 32       	cpi	r19, 0x26	; 38
 10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x2c>
 110:	84 2f       	mov	r24, r20
 112:	81 11       	cpse	r24, r1
		{
			DDRB = (0<<3);
 114:	14 b8       	out	0x04, r1	; 4
		}
		if ((Overflow > 38))
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	87 32       	cpi	r24, 0x27	; 39
 11c:	60 f3       	brcs	.-40     	; 0xf6 <main+0x10>
		{
			DDRB = (1<<3);
 11e:	64 b9       	out	0x04, r22	; 4
			Overflow = 0;
 120:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
 124:	e8 cf       	rjmp	.-48     	; 0xf6 <main+0x10>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
