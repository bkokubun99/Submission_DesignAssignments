
DA_2C_TASK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f4  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000909  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  c4:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <set>:
#include <avr/io.h>
#include <util/delay.h>

void set()
{
	TCCR0A = 0;					//NORMAL MODE OPERATION
  cc:	14 bc       	out	0x24, r1	; 36
	TCCR0B  = 0X05;				//THE PRESCALER SET TO 1024
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00;				//COUNTER VALUE
  d2:	16 bc       	out	0x26, r1	; 38
  d4:	08 95       	ret

000000d6 <On_250>:
}
void On_250()
{
  d6:	2f e0       	ldi	r18, 0x0F	; 15
  d8:	30 e0       	ldi	r19, 0x00	; 0
		DDRB |= (1<<3);				//SET PORTB.3 "ON"
		cycle --;
		while((TIFR0 & 0X01) == 0)
		{
			TCNT0 = 0X00;
			TIFR0 = 0X01;				//RESET OVERFLOW FLAG
  da:	81 e0       	ldi	r24, 0x01	; 1
void On_250()
{
	int cycle = 15;
	while (cycle != 0)
	{
		DDRB |= (1<<3);				//SET PORTB.3 "ON"
  dc:	23 9a       	sbi	0x04, 3	; 4
		cycle --;
		while((TIFR0 & 0X01) == 0)
  de:	a8 99       	sbic	0x15, 0	; 21
  e0:	04 c0       	rjmp	.+8      	; 0xea <On_250+0x14>
		{
			TCNT0 = 0X00;
  e2:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0X01;				//RESET OVERFLOW FLAG
  e4:	85 bb       	out	0x15, r24	; 21
	int cycle = 15;
	while (cycle != 0)
	{
		DDRB |= (1<<3);				//SET PORTB.3 "ON"
		cycle --;
		while((TIFR0 & 0X01) == 0)
  e6:	a8 9b       	sbis	0x15, 0	; 21
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <On_250+0xc>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	31 09       	sbc	r19, r1
	TCNT0 = 0X00;				//COUNTER VALUE
}
void On_250()
{
	int cycle = 15;
	while (cycle != 0)
  ee:	b1 f7       	brne	.-20     	; 0xdc <On_250+0x6>
		{
			TCNT0 = 0X00;
			TIFR0 = 0X01;				//RESET OVERFLOW FLAG
		}
	}
}
  f0:	08 95       	ret

000000f2 <Off_375>:

void Off_375()
{
  f2:	27 e1       	ldi	r18, 0x17	; 23
  f4:	30 e0       	ldi	r19, 0x00	; 0
		DDRB &=~ (1<<3);			//SET PORTB.3 "OFF"
		cycle --;
		while ((TIFR0 & 0X01) == 0)
		{
			TCNT0 = 0X00;
			TIFR0 = 0X01;			//RESET OVERFLOW FLAG
  f6:	81 e0       	ldi	r24, 0x01	; 1
void Off_375()
{
	int cycle = 23;
	while (cycle != 0)
	{
		DDRB &=~ (1<<3);			//SET PORTB.3 "OFF"
  f8:	23 98       	cbi	0x04, 3	; 4
		cycle --;
		while ((TIFR0 & 0X01) == 0)
  fa:	a8 99       	sbic	0x15, 0	; 21
  fc:	04 c0       	rjmp	.+8      	; 0x106 <Off_375+0x14>
		{
			TCNT0 = 0X00;
  fe:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0X01;			//RESET OVERFLOW FLAG
 100:	85 bb       	out	0x15, r24	; 21
	int cycle = 23;
	while (cycle != 0)
	{
		DDRB &=~ (1<<3);			//SET PORTB.3 "OFF"
		cycle --;
		while ((TIFR0 & 0X01) == 0)
 102:	a8 9b       	sbis	0x15, 0	; 21
 104:	fc cf       	rjmp	.-8      	; 0xfe <Off_375+0xc>
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
}

void Off_375()
{
	int cycle = 23;
	while (cycle != 0)
 10a:	b1 f7       	brne	.-20     	; 0xf8 <Off_375+0x6>
		{
			TCNT0 = 0X00;
			TIFR0 = 0X01;			//RESET OVERFLOW FLAG
		}		
	}
}
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	set();	
 10e:	0e 94 66 00 	call	0xcc	; 0xcc <set>
	On_250();
 112:	0e 94 6b 00 	call	0xd6	; 0xd6 <On_250>
	Off_375();
 116:	0e 94 79 00 	call	0xf2	; 0xf2 <Off_375>
	
	return 1;
}
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
